// CSS Un-Grammar.
//
// This grammar specifies the structure of Rust's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //          				-- comment
//   Name =      				-- non-terminal definition
//   'ident'     				-- token (terminal)
//   A B         				-- sequence
//   A | B       				-- alternation
//   A*          				-- zero or more repetition
//   (A (',' A)* ','?)	-- repetition of node A separated by ',' and allowing a trailing comma
//   (A (',' A)*)	      -- repetition of node A separated by ',' without a trailing comma
//   A?          				-- zero or one repetition
//   (A)         				-- same as A
//   label:A     				-- suggested name for field of AST node

// NOTES
//
// - SyntaxNode, SyntaxToken and SyntaxElement will be stripped from the codegen
// - Bogus nodes are special nodes used to keep track of broken code; they are
//   not part of the grammar but they will appear inside the green tree


///////////////
// BOGUS NODES
///////////////
// SyntaxElement is a generic data structure that is meant to track nodes and tokens
// in cases where we care about both types
//
// As Bogus* node will need to yield both tokens and nodes without discrimination,
// and their children will need to yield nodes and tokens as well.
// For this reason, SyntaxElement = SyntaxElement
SyntaxElement = SyntaxElement

CssBogus = SyntaxElement*


CssStyleSheet =
	bom: 'UNICODE_BOM'?
	content: CssStyleSheetContent
	eof: 'EOF'

CssStyleSheetContent = AnyCssStylesheetContent*

AnyCssStylesheetContent =
	 CssQualifiedRule
	| CssAtRule
	| CssVariableDefinedStatement


CssQualifiedRule =
	prelude: CssQualifiedRulePrelude 
	block: CssCurlyBracketsBlock

CssQualifiedRulePrelude = CssComponentValue*

// {} block
CssCurlyBracketsBlock =
	'{'
	content: CssCurlyBracketsBlockContent
	'}'

CssAtRule = 
	name: CssAtKeyword 
	prelude: CssAtRuleComponentValue 
	CssAtRuleContent

CssAtRuleComponentValue = CssComponentValue*
CssAtRuleContent = (CssCurlyBracketsBlock | CssAtRuleSemicolon)
CssAtRuleSemicolon = ';'

CssCurlyBracketsBlockContent = AnyCssCurlyBracketsBlockContent*

AnyCssCurlyBracketsBlockContent =CssBlockDeclarationList  | CssAtRule | CssQualifiedRule

CssBlockDeclarationList = CssDeclarationList

CssDeclarationList =  CssDeclaration (';' CssDeclaration)* ';'?

CssDeclaration = 
	name: CssIdentifier 
	':'
	value: CssComponentValueList

CssComponentValueList = CssComponentValue*

CssComponentValue = CssPreservedToken | CssSimpleBlock | CssFunctionBlock | CssSelectorList


CssSimpleBlock =  CssSimpleCurlyBracketsBlock | CssSimpleParenthesesBlock | CssSimpleSquareBracketsBlock

CssSimpleCurlyBracketsBlock = 
	'{'
	content: CssSimpleComponentValueList
	'}'

CssSimpleParenthesesBlock = 
	'('
	content: CssSimpleComponentValueList
	')'

CssSimpleSquareBracketsBlock = 
	'['
	content: CssSimpleComponentValueList
	']'

CssSimpleComponentValueList = CssComponentValue*

CssFunctionBlock = CssIdentifier '(' CssComponentValueList ')'

CssPreservedToken = 
	CssIdentifier 
	| CssAtKeyword
	| CssNumber 
	| CssString 


CssDimension = 
   value: CssNumber
   unit: CssIdentifier
   
CssPercentage = value: CssNumber '%'

// @xxx: abc;
CssVariableDefinedStatement = 
	name: CssAtKeyword
	':'
	value: CssComponentValueList
	';'

CssExpression = CssFunctionExpress | CssBinaryExpression | CssParenthesesExpression

CssFunctionExpress = CssFunctionBlock 

CssBinaryExpression = CssExpression CssBinaryOperator CssExpression

CssParenthesesExpression = '(' CssExpression ')'

CssVariableVariableExpress = '@' CssAtKeyword

CssVariableExpress = '@' '{' CssIdentifier '}'

CssPropertyExpress = '$' CssIdentifier

CssSelectorList = CssSelector (',' CssSelector)*

CssSelector = ElementSelector | AnySelector | PseudoClassSelector | AttributeSelector | CssClassSelector

ElementSelector = CssSelectorIdent

AnySelector = '*'

CompoundSelector = ElementSelector | AnySelector

PseudoClassSelector = ':' CssSelectorIdent  ('(' CssSelector* ')')?

AttributeSelector = '[' AttributeSelectorValue (CssAttributeSelectorOperator AttributeSelectorValue)? ('s' | 'i')? ']'

AttributeSelectorValue = CssSelectorIdent | CssString

CssAttributeSelectorOperator = '=' | '~=' | '|=' | '^=' | '$=' | '*='

CssClassSelector = '.' CssSelectorIdent

CssIdSelector = '#' CssSelectorIdent

CssSelectorIdent = CssIdentifier | CssVariableSelector

CssVariableSelector = '@' CssIdentifier

CssCombinatorSelector = ' ' | '>' | '+' | '~' 


CssBinaryOperator = value: ('+' | '-' | '*' | '/' )


CssIdentifier = value: 'ident'
CssAtKeyword = value: 'at_ident' // @xxx
CssString = value: 'css_string_literal' // "xxx"
CssNumber = value: 'css_number_literal'  // 123